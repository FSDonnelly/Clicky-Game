{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\donne\\\\Websites\\\\Clicky-Game\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\donne\\\\Websites\\\\Clicky-Game\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\donne\\\\Websites\\\\Clicky-Game\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\donne\\\\Websites\\\\Clicky-Game\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\donne\\\\Websites\\\\Clicky-Game\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\donne\\\\Websites\\\\Clicky-Game\\\\src\\\\App.js\";\nimport React, { Component } from \"react\";\nimport Navbar from \"./components/Navbar\";\nimport Header from \"./components/Header\";\nimport Characters from \"./components/HeroCard/HeroCard\";\nimport Wrapper from \"./components/Wrapper/Wrapper\";\nimport characters from \"./heros.json\"; // shuffle function from stackoverflow\n\nfunction shuffle(array) {\n  for (var i = array.length - 1; i > 0; i--) {\n    var j = Math.floor(Math.random() * (i + 1));\n    var _ref = [array[j], array[i]];\n    array[i] = _ref[0];\n    array[j] = _ref[1];\n  }\n\n  return array;\n}\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      characters: characters,\n      score: 0,\n      topScore: 0,\n      showAlert: 0,\n      showSuccess: 0,\n      clickedCharacters: []\n    };\n\n    _this.clickedImage = function (id) {\n      // assign the state of the empty array to a let to be updated\n      var clickedCharacters = _this.state.clickedCharacters;\n      var score = _this.state.score;\n      var topScore = _this.state.topScore;\n\n      _this.setState({\n        showAlert: 0\n      }); // if the clicked image has an id of the indexed characters\n\n\n      if (clickedCharacters.indexOf(id) === -1) {\n        // push that id into that id into the array to be stored\n        clickedCharacters.push(id);\n        console.log(clickedCharacters); // run the score function\n\n        _this.handleIncrement(); // run the reshuffle function after each click\n\n\n        _this.makeShuffle();\n      } else if (_this.state.score === 12) {\n        alert(\"You win, you clicked each character with out clicking doubles\");\n\n        _this.setState({\n          showSuccess: 1,\n          score: 0,\n          clickedCharacters: []\n        });\n      } else {\n        _this.setState({\n          score: 0,\n          clickedCharacters: []\n        });\n\n        console.log(\"duplicate\");\n\n        _this.setState({\n          showAlert: 1\n        });\n      }\n\n      if (score > topScore) {\n        _this.setState({\n          topScore: score\n        });\n      }\n    };\n\n    _this.handleIncrement = function () {\n      // setState updates a components states\n      _this.setState({\n        score: _this.state.score + 1\n      });\n    };\n\n    _this.makeShuffle = function () {\n      _this.setState({\n        characters: shuffle(characters)\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    // reset = () => {\n    //   this.setState({ score: 0 })\n    // }\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, React.createElement(Navbar, {\n        score: this.state.score,\n        topScore: this.state.topScore,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }), React.createElement(Header, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"alert alert-danger\",\n        style: {\n          opacity: this.state.showAlert\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, \"Sorry you clicked the same person twice, start over\"), React.createElement(\"div\", {\n        className: \"alert alert-success\",\n        style: {\n          opacity: this.state.showSuccess\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, \"You win, you clicked each character with out clicking doubles\"), React.createElement(Wrapper, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, this.state.characters.map(function (character) {\n        return React.createElement(Characters, {\n          key: character.id,\n          id: character.id,\n          name: character.name,\n          image: character.image,\n          clickedImage: _this2.clickedImage,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 101\n          },\n          __self: this\n        });\n      })));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["C:\\Users\\donne\\Websites\\Clicky-Game\\src\\App.js"],"names":["React","Component","Navbar","Header","Characters","Wrapper","characters","shuffle","array","i","length","j","Math","floor","random","App","state","score","topScore","showAlert","showSuccess","clickedCharacters","clickedImage","id","setState","indexOf","push","console","log","handleIncrement","makeShuffle","alert","opacity","map","character","name","image"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\nimport Navbar from \"./components/Navbar\";\nimport Header from \"./components/Header\";\nimport Characters from \"./components/HeroCard/HeroCard\";\nimport Wrapper from \"./components/Wrapper/Wrapper\";\nimport characters from \"./heros.json\";\n\n// shuffle function from stackoverflow\nfunction shuffle(array) {\n  for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n  }\n  return array;\n}\n\n\nclass App extends Component {\n\n  state = {\n    characters,\n    score: 0,\n    topScore: 0,\n    showAlert: 0,\n    showSuccess: 0,\n    clickedCharacters: []\n  };\n\n  clickedImage = id => {\n    // assign the state of the empty array to a let to be updated\n    let clickedCharacters = this.state.clickedCharacters;\n    let score = this.state.score;\n    let topScore = this.state.topScore;\n    this.setState({\n      showAlert: 0\n    });\n    \n    // if the clicked image has an id of the indexed characters\n    if (clickedCharacters.indexOf(id) === -1) {\n      // push that id into that id into the array to be stored\n      clickedCharacters.push(id);\n      console.log(clickedCharacters);\n      // run the score function\n      this.handleIncrement();\n      // run the reshuffle function after each click\n      this.makeShuffle();\n    } else if (this.state.score === 12) {\n      alert(\"You win, you clicked each character with out clicking doubles\")\n      this.setState({\n        showSuccess: 1,\n        score: 0,\n        clickedCharacters: []\n      });\n    } else {\n      this.setState({\n        score: 0,\n        clickedCharacters: []\n      });\n      console.log(\"duplicate\")\n      this.setState({\n        showAlert: 1\n      });\n  \n    }\n\n    if (score > topScore) {\n      this.setState({\n        topScore: score\n      })\n    } \n  }\n\n  // handleIncrement increases this.state.score by 1\n  handleIncrement = () => {\n    // setState updates a components states\n    this.setState({ score: this.state.score + 1 });\n  };\n\n  // shuffle up images\n  makeShuffle = () => {\n    this.setState({ characters: shuffle(characters) })\n  }\n\n  // reset = () => {\n  //   this.setState({ score: 0 })\n  // }\n  \n\n  render() {\n    return (\n      <div>\n        <Navbar\n          score={this.state.score}\n          topScore={this.state.topScore}\n        />\n        <Header />\n        <div className=\"alert alert-danger\" style={{opacity: this.state.showAlert}}>Sorry you clicked the same person twice, start over</div>\n        <div className=\"alert alert-success\" style={{opacity: this.state.showSuccess }}>You win, you clicked each character with out clicking doubles</div>\n        <Wrapper>\n          {this.state.characters.map(character => (\n            <Characters \n              key={character.id}\n              id={character.id}\n              name={character.name}\n              image={character.image}\n              clickedImage={this.clickedImage}\n            />\n          ))}\n          \n        </Wrapper>\n\n\n        \n      </div>\n    )\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}